datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//!  need to change most plural model names to singular

model User {
  id    String @id @default(cuid())
  email String @unique
  name String? @default("User")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  lists    Lists[]
  routines Routines[]
  values   Values[]
  desires  Desires[]
  desiresClarifyingQuestions DesiresClarifyingQuestions[]
  scheduledLists ScheduledList[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Lists {
  id    String @id @default(cuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  todos ListToDos[]
}

model ListToDos {
  id   String @id @default(cuid())
  body String
  urgent Boolean
  important Boolean
  complete Boolean @default(false)
  dueDate DateTime?
  sortOrder Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list  Lists   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String
}

model Routines {
  id    String @id @default(cuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  routineToDos RoutineToDos[]
}

model RoutineToDos {
  id   String @id @default(cuid())
  body String
  complete Boolean @default(false)
  sortOrder Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  routine   Routines   @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineId String
}
model Values {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  valueTitle String
  valueDescription String
  sortOrder Int @default(0)
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  valueDesires DesireValues[]
}


model Desires {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String
  sortOrder Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  desireValues DesireValues[]
}
 
 model DesireValues {
  id         String  @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  desireId   String
  valueId    String

  value      Values   @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  desire     Desires  @relation(fields: [desireId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([valueId, desireId])
}

model DesiresClarifyingQuestions {
  id         String  @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  birthDate  DateTime? 
  twentyFourHours String? @default("")
  twentyFourHoursRegrets String? @default("")
  oneWeek String? @default("")
  oneWeekRegrets String? @default("")
  oneMonth String? @default("")
  oneMonthRegrets String? @default("")
  oneYear String? @default("")
  oneYearRegrets String? @default("")
  fiveYears String? @default("")
  twentyYears String? @default("")
  fiftyYears String? @default("")
  maxAge Int? @default(85)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model ScheduledList {
  id    String @id @default(cuid())
  listId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  title String
  isDraggable Boolean @default(true)
  start   DateTime
  end   DateTime
  description Json

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

}

