datasource db {
  provider = "postgresql"
   url = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  email String @unique
  name String? @default("User")

  password Password?
  projects Project[]
  notes    Note[]
  lists    List[]
  routines Routine[]
  requiredSavings RequiredSavings[]
  routineTrackers RoutineTracker[]
  scheduledLists ScheduledList[]
  values  Value[]
  desires  Desire[]
  desiresClarifyingQuestions DesiresClarifyingQuestions[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Project {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  title String
  description String?
  sortOrder Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  desireId String? @unique
  desire Desire? @relation(fields: [desireId], references: [id])

  notes    Note[]
  lists    List[]
  routines Routine[]
  requiredSavings RequiredSavings[]
  routineTrackers RoutineTracker[]
}

model RequiredSavings {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  sortOrder Int @default(0)

  requiredAmount Int
  savedAmount Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?

}

model RoutineTracker {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  sortOrder Int @default(0)

  date DateTime
  success Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?
  routine Routine? @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineId String?

}

model Note {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  title String
  body  String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?
}

model List {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?

  todos ListToDo[]
}

model ListToDo {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  body String
  urgent Boolean
  important Boolean
  complete Boolean @default(false)
  dueDate DateTime?
  sortOrder Int

  list  List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String
}

model Routine {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?
  
  routineToDos RoutineToDo[]
  routineTracker RoutineTracker[]
}

model RoutineToDo {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  body String
  complete Boolean @default(false)
  sortOrder Int

  routine   Routine   @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineId String
}



model Value {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  valueTitle String
  valueDescription String
  sortOrder Int @default(0)
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  valueDesire DesireValue[]
}


model Desire {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String
  sortOrder Int @default(0)

  ideal String?
  current String?
  desireOutcomes DesireOutcome[]
  achieved Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  projectId String? @unique
  project Project? 

  desireValues DesireValue[]
}

model DesireOutcome {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  sortOrder Int @default(0)
  desireOutcomeProgress DesireOutcomeProgress[]
  dueDate DateTime?
  complete Boolean @default(false)

  desireId String
  desire Desire @relation(fields: [desireId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model DesireOutcomeProgress {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  sortOrder Int @default(0)
  dueDate DateTime?
  complete Boolean @default(false)

  desireOutcomeId String
  desireOutcome DesireOutcome @relation(fields: [desireOutcomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}
 
 //! to upload images to GCS, check out 
 //! https://github.com/leerob/nextjs-gcp-storage
// model DesireImages{

//   id   String @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   imageFile 

//   desireId String
//   desire Desire @relation(fields: [desireId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   @@unique([url, desireId])
// }
 model DesireValue {
  id         String  @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  desireId   String
  valueId    String

  value      Value   @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  desire     Desire  @relation(fields: [desireId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([valueId, desireId])
}

//seed db with some data ehre
model DesiresClarifyingQuestions {
  id         String  @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  birthDate  DateTime?
  twentyFourHours String? @default("")
  twentyFourHoursRegrets String? @default("")
  oneWeek String? @default("")
  oneWeekRegrets String? @default("")
  oneMonth String? @default("")
  oneMonthRegrets String? @default("")
  oneYear String? @default("")
  oneYearRegrets String? @default("")
  fiveYears String? @default("")
  twentyYears String? @default("")
  fiftyYears String? @default("")
  maxAge Int? @default(85)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model ScheduledList {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  listId String
  title String
  isDraggable Boolean @default(true)
  start   DateTime
  end   DateTime
  description Json

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}



