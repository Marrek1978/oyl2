datasource db {
  provider = "postgresql"
   url = env("DATABASE_URL") // uses connection pooling
  // url = env("DATABASE_PRISMA_URL") // uses connection pooling
  // directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  email String @unique
  name String? @default("User")

  password Password?
  lists List[]
  routines Routine[]
  notes  Note[]
  values  Value[]
  desires  Desire[]
  scheduledItems ScheduledItem[]
  clarifyingQuestions ClarifyingQuestions[]
 
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}




model Value {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  title String
  description String
  sortOrder Int @default(0)
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  valueDesire DesireValue[]
}

 model DesireValue {
  id         String  @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  desireId   String
  valueId    String

  value      Value   @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  desire     Desire  @relation(fields: [desireId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([valueId, desireId])
}

model Desire {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String
  sortOrder Int @default(0)
  ideal String?
  current String?
  achieved Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  
  outcomes Outcome[]
  desireValues DesireValue[]
  notes  Note[]
}

model Outcome {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  vision String?
  sortOrder Int @default(0)
  complete Boolean @default(false)
  
  desireId String
  desire Desire @relation(fields: [desireId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  lists  List[]
  notes  Note[]
  routines Routine[]
  milestoneGroup MilestoneGroup[]
  savings  Savings[]
  habits Habit[]

}
 



model ClarifyingQuestions {
  id         String  @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  birthDate  DateTime?
  twentyFourHours String? @default("")
  twentyFourHoursRegrets String? @default("")
  oneWeek String? @default("")
  oneWeekRegrets String? @default("")
  oneMonth String? @default("")
  oneMonthRegrets String? @default("")
  oneYear String? @default("")
  oneYearRegrets String? @default("")
  fiveYears String? @default("")
  twentyYears String? @default("")
  fiftyYears String? @default("")
  maxAge Int? @default(85)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}


model ScheduledItem {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  itemId String
  title String
  isDraggable Boolean @default(true)
  start   DateTime
  end   DateTime
  description Json

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}


model Note {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  title String
  body  String
  sortOrder Int @default(0)

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  Outcome Outcome? @relation(fields: [outcomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outcomeId String?

  desire Desire? @relation(fields: [desireId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  desireId String?
}


model List {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  sortOrder Int @default(0)
  isSpecialList Boolean @default(false)

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?
  
  Outcome Outcome? @relation(fields: [outcomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outcomeId String?

  todos ToDo[]
}

model ToDo {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  body String
  isUrgent Boolean @default(false)
  isImportant Boolean @default(false)
  isComplete Boolean @default(false)
  dueDate DateTime?
  sortOrder Int

  list  List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String
}


model Routine {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  sortOrder Int @default(0)
  isSpecialRoutine Boolean @default(false)

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  outcome Outcome? @relation(fields: [outcomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outcomeId String?
  
  tasks Task[]
}


model Task {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  body String
  isComplete Boolean @default(false)
  sortOrder Int

  routine   Routine   @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineId String
}


model Savings {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  sortOrder Int @default(0)

  requiredAmount Int
  startDate DateTime
  savedAmount Int @default(0)
  monthlyContribution Int
  estCompletionDate DateTime

  Outcome Outcome @relation(fields: [outcomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outcomeId String

  savingsPayments SavingsPayments[]
 }

 model SavingsPayments {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  month String
  amount Int
  paymentDate DateTime

  savings Savings @relation(fields: [savingsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  savingsId String
 }


model Habit {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  startDate DateTime @default(now())
  sortOrder Int @default(0)

  Outcome Outcome @relation(fields: [outcomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outcomeId String

  streak Streak[]
}


model Streak {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date DateTime
  isSuccess Boolean? 

  habits Habit @relation(fields: [habitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  habitId String
}


model MilestoneGroup {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  sortOrder Int @default(0)

  Outcome Outcome @relation(fields: [outcomeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outcomeId String

  milestones Milestone[]
}

model Milestone {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  isComplete Boolean @default(false)
  dueDate DateTime?
  sortOrder Int @default(0)
  completedAt DateTime?
  
  milestoneGroup MilestoneGroup @relation(fields: [milestoneGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  milestoneGroupId String
}

